<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- annotation-driven : @Controller 어노테이션을 이용하여 Controller 클래스를 Spring
	Bean으로 등록하여 요청 처리 메소드를 작성해 요청 처리할 수 있도록 등록하는 어노테이션 -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- resources : Front Controller를 사용하지 않고 직접 요청하여 응답되도록 설정하는 엘리먼트 -->
	<!-- => 리소스 파일을 클라이언트에게 직접 제공하기 위해 사용 -->
	<!-- mapping 속성 : 리소스 파일을 요청할 수 있는 URL 패턴을 속성값으로 설정 -->
	<!-- => [**] 기호를 속성값을 사용한 경우 하위 폴더를 포함한 모든 리소스 파일을 표현  -->
	<!-- location 속성 : 리소스 파일이 저장된 폴더 경로를 속성값으로 설정 -->
	<!-- <resources mapping="/resources/**" location="/resources/" />  -->
	<resources mapping="/images/**" location="/resources/images/" />
	<resources mapping="/css/**" location="/resources/css/" />
	<resources mapping="/js/**" location="/resources/js/" />
	
	<!-- UrlBasedViewResolver 클래스를 Spring Bean으로 등록 -->
	<!-- UrlBasedViewResolver : Spring Framework에서 제공하는 ViewResolver가 아닌 외부에서
	제공하는 ViewResolver를 이용하여 응답 처리하기 위한 기능을 제공하는 객체 -->
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<!-- viewClass 필드에 외부에서 제공하는 ViewResolver 클래스(TilesView)를 인젝션 처리 -->
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
		<!-- order 필드에 ViewResolver 사용에 대한 우선순위 관련 정수값을 인젝션 처리 -->
		<!-- => 정수값이 낮을수록 우선순위가 높게 설정 -->
		<beans:property name="order" value="2"/>
	</beans:bean>

	<!-- TilesConfigurer 클래스를 Spring Bean으로 등록 -->
	<!-- TilesConfigurer : Tiles 프로그램에서 사용할 템플릿 페이지 정보가 저장된 XML 파일
	(Tiles Configuration File)을 저장하기 위한 객체 -->
	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<!-- definitions 필드에 List 객체를 생성하여 인젝션 처리 -->
		<!-- => List 객체의 요소로 Tiles Configuration File의 경로를 추가 -->
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/spring/appServlet/tiles.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- InternalResourceViewResolver : 요청 처리 메소드에서 반환되는 ViewName를 전달받아
	응답 처리하기 위한 JSP 문서의 경로로 변환하여 제공하는 클래스 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="3"/>
	</beans:bean>
	
	<!-- component-scan : Spring 어노테이션을 사용한 클래스가 작성된 패키지를 설정하는 엘리먼트 -->
	<!-- => 패키지에 작성된 클래스의 어노테이션을 Spring Container가 처리 -->
	<!-- <context:component-scan base-package="xyz.itwill.controller" /> -->
	<context:component-scan base-package="xyz.itwill10.controller" />
	<context:component-scan base-package="xyz.itwill10.dao" />
	<context:component-scan base-package="xyz.itwill10.service" />
</beans:beans>










